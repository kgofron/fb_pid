#! Generated by VisualDCT v2.8.2
#! DBDSTART
#! DBDEND


#
# file:     fb_epid.db
# date:     22 September 2004
# purpose:  use the epid record for software feedback
# modified by KL 2015 to add autosave info fields, some NSLS-II naming
#------------------------------------------
#  P    prefix for this instance of this database
#------------------------------------------
#  $(Sys)$(Dev)$(PID):in.INAN        holds PV name of input PV (by default)
#  $(IN)               PV name: input signal
#  $(OUT)              PV name: output positioner
#  $(MODE)             choice:  PID or Max/Min
#  $(CALC)             string:  calculation, 1=feedback on, 0=feedback off
#  $(PERMIT1)          PV name: boolean value to permit operations
#  $(PERMIT2)          PV name: boolean value to permit operations
#  $(PERMIT3)          PV name: boolean value to permit operations
#  $(PERMIT4)          PV name: boolean value to permit operations
# Use on instance of this database for each feedback channel.
# If two different methods for feedback are desired
# for a given axis, call two instances of this database.
# For example, on 33ID for feedback of the DCM crystal 2 PZT,
#  one might choose either the XBPM position signal or the 
#  D3 graphite foil intensity to drive the PZT position.
#
#  These might be the XBPM position feedback terms:
#    P       = iad:fbe:xbpm:y
#    IN      = iad:xbpm:pos:y
#    OUT     = iad:540:c0:out0
#    MODE    = PID
#    CALC    = A&&B&&C
#    PERMIT1 = iad:beamAvailable.VAL
#    PERMIT2 = iad:xbpm:current:ok.VAL
#    PERMIT3 = 
#    PERMIT4 = 
#
#  These might be the D3 foil feedback terms:
#    P       = iad:fbe:D3:y
#    IN      = iad:540:c0:in10
#    OUT     = iad:540:c0:out0
#    MODE    = Max/Min
#    CALC    = A&&B
#    PERMIT1 = iad:beamAvailable.VAL
#    PERMIT2 = 
#    PERMIT3 = 
#    PERMIT4 = 
# For each channel:
#  signal(ao or other)
#    -> in(swait)
#    --> epid
#    ---> obuf(swait) 
#    ----> out(swait)
#    -----> positioner(motor or ao)
# Theory of operation:
# 1. A signal is available as an EPICS process variable.
#    The signal source can be in the VME with the feedback software
#    or in another VME available on the local network.
# 2. An input calculation (swait record) is used to allow some
#    flexibility for conditioning the input signal to the feedback.
# 3. An epid record is used to provide real-time feedback
#    and recalculate the output variable.
# 4. The output from the epid record is buffered by
#    the outbuf calculation which watches the Feedback ON (FBON)
#    switch and retains the previous output value if the feedback
#    software is switched off.
# 5. An output calculation is used to allow some flexibility
#    for conditioning the output signal to the positioner.
#    The conditioned epid result is pushed to the positioner.
# 6. A positioner responds to the result from the epid record
#    and thus further modifies the input signal.
# 7. The feedback can be switched on manually, subject to
#    the logic of some other calculation.  For example,
#    shutter closed could suspend feedback.  In this case,
#    the output is not driven.
# 8. When the feedback is switched on, the positioner should
#    not jerk to a different position.  The feedback software
#    must be prepared to start moving the positioner from its 
#    present location.
# References
#  epid          http://cars9.uchicago.edu/software/epics/epidRecord.html
#  swait         ???http://www.aps.anl.gov/aod/bcda/synApps/calc/calc.html
#  PID tuning    see the epid documentation (above)
#------------------------------------------
#
# epid record to actually calculate the 
# feedback response to the input
#
record(epid, "$(Sys)$(Dev)$(PID)") {
  field(DESC, "EPID feedback")
  field(INP, "$(Sys)$(Dev)$(PID):in")
  field(FMOD, "$(MODE)")
  field(FBON, "Off")
  field(SCAN, "Passive")
  field(KP, "0")
  field(KI, "0")
  field(KD, "0")
  field(I, "0")
  field(DRVL, "0")
  field(DRVH, "0")
  field(EGU, "feedback")
  field(PREC, "$(PREC)")
  info(autosaveFields_pass0, "DESC EGU PREC SCAN VAL DRVL DRVH FMOD KP KI KD I")
}

#
# Input calculation to the epid record
# Users can adjust the input based on a simple calculation
# or a more complex database resulting in this simple calculation
# By default, $(Sys)$(Dev)$(PID):in.INAN is the PV name of the input signal
#
record(swait, "$(Sys)$(Dev)$(PID):in") {
  field(DESC, "EPID feedback input")
  field(PREC, "5")
  field(SCAN, "I/O Intr")
  field(CALC, "A")
  field(INAN, "$(IN)")
#  info(autosaveFields_pass0, "DESC A B C D E F G H I J K L INAN INBN INCN INDN INEN INFN INGN INHN ININ INJN INKN INLN INAP INBP INCP INDP INEP INFP INGP INHP INIP INJP INKP INLP CALC$ OUTN OOPT DOPT DOLN SCAN ODLY PREC OEVT FLNK")
  info(autosaveFields_pass0, "DESC INAN INBN INCN INDN INEN INFN INGN INHN ININ INJN INKN INLN INAP INBP INCP INDP INEP INFP INGP INHP INIP INJP INKP INLP CALC$ OUTN OOPT DOPT DOLN SCAN ODLY PREC OEVT FLNK")
}

#
# Output buffer from epid record
# This record overcomes a limitation observed in the 
# epid record when $(Sys)$(Dev)$(PID).FBON=0 but $(Sys)$(Dev)$(PID).OVAL is changed anyway.
# In this record, $(Sys)$(Dev)$(PID):obuf.VAL will not change when $(Sys)$(Dev)$(PID).FBON=0
#
record(swait, "$(Sys)$(Dev)$(PID):obuf") {
  field(DESC, "EPID FBON output buffer")
  field(PREC, "5")
  field(SCAN, "I/O Intr")
  field(CALC, "B?A:C")
  field(INAN, "$(Sys)$(Dev)$(PID).OVAL")
  field(INBN, "$(Sys)$(Dev)$(PID).FBON")
  field(INCN, "$(Sys)$(Dev)$(PID):obuf.VAL")
  info(autosaveFields_pass0, "DESC A B C D E F G H I J K L INAN INBN INCN INDN INEN INFN INGN INHN ININ INJN INKN INLN INAP INBP INCP INDP INEP INFP INGP INHP INIP INJP INKP INLP CALC$ OUTN OOPT DOPT DOLN SCAN ODLY PREC OEVT FLNK")
}

#
# Provide the output from the epid record (through the output buffer)
# The intent here is to provide the user with a means
# of modifying the output signal from the epid record.
# Whether or not this is a good idea remains to be seen.
# This record pulls the value from $(Sys)$(Dev)$(PID):obuf
# $(Sys)$(Dev)$(PID):out.OUTN holds the PV name of the output positioner.
#
# Instead, could make this a seq record, eliminating the calculation.
#
record(swait, "$(Sys)$(Dev)$(PID):out") {
  field(DESC, "EPID feedback output")
  field(PREC, "5")
  field(SCAN, "I/O Intr")
  field(CALC, "A")
  field(INAN, "$(Sys)$(Dev)$(PID):obuf.VAL")
  field(OUTN, "$(OUT)")
#  info(autosaveFields_pass0, "DESC A B C D E F G H I J K L INAN INBN INCN INDN INEN INFN INGN INHN ININ INJN INKN INLN INAP INBP INCP INDP INEP INFP INGP INHP INIP INJP INKP INLP CALC$ OUTN OOPT DOPT DOLN SCAN ODLY PREC OEVT FLNK")
  info(autosaveFields_pass0, "DESC INAN INBN INCN INDN INEN INFN INGN INHN ININ INJN INKN INLN INAP INBP INCP INDP INEP INFP INGP INHP INIP INJP INKP INLP CALC$ OUTN OOPT DOPT DOLN SCAN ODLY PREC OEVT FLNK")
}

#
# bumpless start feature
#
# When $(Sys)$(Dev)$(PID).FBON transitions from 0 to 1 (as feedback starts up),
# it is necessary to grab the current value of the
# output positioner and push it into $(Sys)$(Dev)$(PID).I
# However, since the user might change $(Sys)$(Dev)$(PID):out.OUTN,
# $(Sys)$(Dev)$(PID):outpv detects this change and rewrites $(Sys)$(Dev)$(PID):resume.INBN.
# $(Sys)$(Dev)$(PID):resume.INBN holds the PV name of the output positioner
#
record(sseq, "$(Sys)$(Dev)$(PID):outpv") {
  field(DESC, "follow OUT PV name")
# field(SCAN, "I/O Intr")
  field(DOL1, "$(Sys)$(Dev)$(PID):out.OUTN")
  field(DLY1, "0")
  field(LNK1, "$(Sys)$(Dev)$(PID):resume.INBN")
  info(autosaveFields_pass0, "DESC DOL1 DLY1 LNK1")
}

record(swait, "$(Sys)$(Dev)$(PID):resume") {
  field(DESC, "EPID feedback input")
  field(PREC, "5")
  field(SCAN, "I/O Intr")
  field(CALC, "!C&&D?B:A")
  field(INAN, "$(Sys)$(Dev)$(PID):resume.VAL")
  field(INBN, "$(OUT)")
  field(INCN, "$(Sys)$(Dev)$(PID):resume.D")
  field(INCP, "No")
  field(INDN, "$(Sys)$(Dev)$(PID).FBON")
  field(OOPT, "On Change")
  field(OUTN, "$(Sys)$(Dev)$(PID).I")
  info(autosaveFields_pass0, "DESC A B C D E F G H I J K L INAN INBN INCN INDN INEN INFN INGN INHN ININ INJN INKN INLN INAP INBP INCP INDP INEP INFP INGP INHP INIP INJP INKP INLP CALC$ OUTN OOPT DOPT DOLN SCAN ODLY PREC OEVT FLNK")
}

#
# permit
#
# Sometimes, the feedback software must be suspended.
# This must happen automatically, based on some 
# simple calculation or a more complex database 
# resulting in this simple calculation.
# $(Sys)$(Dev)$(PID):enable drives the $(Sys)$(Dev)$(PID).FBON field
#
record(bo, "$(Sys)$(Dev)$(PID):on") {
  field(DESC, "off/on")
  field(ZNAM, "off")
  field(ONAM, "on")
  info(autosaveFields_pass0, "VAL")
}

record(swait, "$(Sys)$(Dev)$(PID):enable") {
  field(DESC, "EPID feedback permit")
  field(PREC, "5")
  field(SCAN, "I/O Intr")
  field(CALC, "$(CALC)")
  field(INAN, "$(Sys)$(Dev)$(PID):on.VAL")
  field(INBN, "$(PERMIT1)")
  field(INCN, "$(PERMIT2)")
  field(INDN, "$(PERMIT3)")
  field(INEN, "$(PERMIT4)")
  field(OOPT, "On Change")
# drive the epid FBON field
  field(OUTN, "$(Sys)$(Dev)$(PID).FBON")
  info(autosaveFields_pass0, "DESC A B C D E F G H I J K L INAN INBN INCN INDN INEN INFN INGN INHN ININ INJN INKN INLN INAP INBP INCP INDP INEP INFP INGP INHP INIP INJP INKP INLP CALC$ OUTN OOPT DOPT DOLN SCAN ODLY PREC OEVT FLNK")
}

record(ai, "$(Sys)$(Dev)$(PID):input_") {
  field(DESC, "Placeholder for input record")
}

record(ao, "$(Sys)$(Dev)$(PID):output_") {
  field(DESC, "Placeholder for output record")
}

#! Further lines contain data used by VisualDCT
#! View(0,0,1.0)
#! Record("$(Sys)$(Dev)$(PID)",20,24,0,0,"$(Sys)$(Dev)$(PID)")
#! Field("$(Sys)$(Dev)$(PID).INP",16777215,1,"$(Sys)$(Dev)$(PID).INP")
#! Link("$(Sys)$(Dev)$(PID).INP","$(Sys)$(Dev)$(PID):in.VAL")
#! Record("$(Sys)$(Dev)$(PID):in",300,135,0,0,"$(Sys)$(Dev)$(PID):in")
#! Field("$(Sys)$(Dev)$(PID):in.VAL",16777215,0,"$(Sys)$(Dev)$(PID):in.VAL")
#! Record("$(Sys)$(Dev)$(PID):obuf",40,367,0,0,"$(Sys)$(Dev)$(PID):obuf")
#! Record("$(Sys)$(Dev)$(PID):out",500,101,0,0,"$(Sys)$(Dev)$(PID):out")
#! Field("$(Sys)$(Dev)$(PID):out.OUTN",16777215,1,"$(Sys)$(Dev)$(PID):out.OUTN")
#! Record("$(Sys)$(Dev)$(PID):outpv",800,129,0,0,"$(Sys)$(Dev)$(PID):outpv")
#! Field("$(Sys)$(Dev)$(PID):outpv.DOL1",16777215,0,"$(Sys)$(Dev)$(PID):outpv.DOL1")
#! Link("$(Sys)$(Dev)$(PID):outpv.DOL1","$(Sys)$(Dev)$(PID):out.OUTN")
#! Field("$(Sys)$(Dev)$(PID):outpv.LNK1",16777215,1,"$(Sys)$(Dev)$(PID):outpv.LNK1")
#! Link("$(Sys)$(Dev)$(PID):outpv.LNK1","$(Sys)$(Dev)$(PID):resume.INBN")
#! Record("$(Sys)$(Dev)$(PID):resume",1080,52,0,0,"$(Sys)$(Dev)$(PID):resume")
#! Field("$(Sys)$(Dev)$(PID):resume.INBN",16777215,0,"$(Sys)$(Dev)$(PID):resume.INBN")
#! Record("$(Sys)$(Dev)$(PID):on",240,363,0,0,"$(Sys)$(Dev)$(PID):on")
#! Record("$(Sys)$(Dev)$(PID):enable",440,332,0,0,"$(Sys)$(Dev)$(PID):enable")
#! Record("$(Sys)$(Dev)$(PID):input_",640,351,0,0,"$(Sys)$(Dev)$(PID):input_")
#! Record("$(Sys)$(Dev)$(PID):output_",660,431,0,0,"$(Sys)$(Dev)$(PID):output_")
